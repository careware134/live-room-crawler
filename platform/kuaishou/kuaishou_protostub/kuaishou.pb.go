// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.3
// source: platform/kuaishou/douyin_protostub/kuaishou.proto

package kuaishou_protostub

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CompressionType int32

const (
	CompressionType_COMPRESSION_TYPE_UNKNOWN CompressionType = 0
	CompressionType_NONE                     CompressionType = 1
	CompressionType_GZIP                     CompressionType = 2
	CompressionType_AES                      CompressionType = 3
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_UNKNOWN",
		1: "NONE",
		2: "GZIP",
		3: "AES",
	}
	CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_UNKNOWN": 0,
		"NONE":                     1,
		"GZIP":                     2,
		"AES":                      3,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[0].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[0]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{0}
}

// 弹幕数据包返回类型
type PayloadType int32

const (
	PayloadType_PAYLOAD_TYPE_UNKNOWN                         PayloadType = 0
	PayloadType_CS_HEARTBEAT                                 PayloadType = 1
	PayloadType_CS_ERROR                                     PayloadType = 3
	PayloadType_CS_PING                                      PayloadType = 4
	PayloadType_PS_HOST_INFO                                 PayloadType = 51
	PayloadType_SC_HEARTBEAT_ACK                             PayloadType = 101
	PayloadType_SC_ECHO                                      PayloadType = 102
	PayloadType_SC_ERROR                                     PayloadType = 103
	PayloadType_SC_PING_ACK                                  PayloadType = 104
	PayloadType_SC_INFO                                      PayloadType = 105
	PayloadType_CS_ENTER_ROOM                                PayloadType = 200
	PayloadType_CS_USER_PAUSE                                PayloadType = 201
	PayloadType_CS_USER_EXIT                                 PayloadType = 202
	PayloadType_CS_AUTHOR_PUSH_TRAFFIC_ZERO                  PayloadType = 203
	PayloadType_CS_HORSE_RACING                              PayloadType = 204
	PayloadType_CS_RACE_LOSE                                 PayloadType = 205
	PayloadType_CS_VOIP_SIGNAL                               PayloadType = 206
	PayloadType_SC_ENTER_ROOM_ACK                            PayloadType = 300
	PayloadType_SC_AUTHOR_PAUSE                              PayloadType = 301
	PayloadType_SC_AUTHOR_RESUME                             PayloadType = 302
	PayloadType_SC_AUTHOR_PUSH_TRAFFIC_ZERO                  PayloadType = 303
	PayloadType_SC_AUTHOR_HEARTBEAT_MISS                     PayloadType = 304
	PayloadType_SC_PIP_STARTED                               PayloadType = 305
	PayloadType_SC_PIP_ENDED                                 PayloadType = 306
	PayloadType_SC_HORSE_RACING_ACK                          PayloadType = 307
	PayloadType_SC_VOIP_SIGNAL                               PayloadType = 308
	PayloadType_SC_FEED_PUSH                                 PayloadType = 310
	PayloadType_SC_ASSISTANT_STATUS                          PayloadType = 311
	PayloadType_SC_REFRESH_WALLET                            PayloadType = 312
	PayloadType_SC_LIVE_CHAT_CALL                            PayloadType = 320
	PayloadType_SC_LIVE_CHAT_CALL_ACCEPTED                   PayloadType = 321
	PayloadType_SC_LIVE_CHAT_CALL_REJECTED                   PayloadType = 322
	PayloadType_SC_LIVE_CHAT_READY                           PayloadType = 323
	PayloadType_SC_LIVE_CHAT_GUEST_END                       PayloadType = 324
	PayloadType_SC_LIVE_CHAT_ENDED                           PayloadType = 325
	PayloadType_SC_RENDERING_MAGIC_FACE_DISABLE              PayloadType = 326
	PayloadType_SC_RENDERING_MAGIC_FACE_ENABLE               PayloadType = 327
	PayloadType_SC_RED_PACK_FEED                             PayloadType = 330
	PayloadType_SC_LIVE_WATCHING_LIST                        PayloadType = 340
	PayloadType_SC_LIVE_QUIZ_QUESTION_ASKED                  PayloadType = 350
	PayloadType_SC_LIVE_QUIZ_QUESTION_REVIEWED               PayloadType = 351
	PayloadType_SC_LIVE_QUIZ_SYNC                            PayloadType = 352
	PayloadType_SC_LIVE_QUIZ_ENDED                           PayloadType = 353
	PayloadType_SC_LIVE_QUIZ_WINNERS                         PayloadType = 354
	PayloadType_SC_SUSPECTED_VIOLATION                       PayloadType = 355
	PayloadType_SC_SHOP_OPENED                               PayloadType = 360
	PayloadType_SC_SHOP_CLOSED                               PayloadType = 361
	PayloadType_SC_GUESS_OPENED                              PayloadType = 370
	PayloadType_SC_GUESS_CLOSED                              PayloadType = 371
	PayloadType_SC_PK_INVITATION                             PayloadType = 380
	PayloadType_SC_PK_STATISTIC                              PayloadType = 381
	PayloadType_SC_RIDDLE_OPENED                             PayloadType = 390
	PayloadType_SC_RIDDLE_CLOESED                            PayloadType = 391
	PayloadType_SC_RIDE_CHANGED                              PayloadType = 412
	PayloadType_SC_BET_CHANGED                               PayloadType = 441
	PayloadType_SC_BET_CLOSED                                PayloadType = 442
	PayloadType_SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE         PayloadType = 645
	PayloadType_SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE PayloadType = 758
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0:   "PAYLOAD_TYPE_UNKNOWN",
		1:   "CS_HEARTBEAT",
		3:   "CS_ERROR",
		4:   "CS_PING",
		51:  "PS_HOST_INFO",
		101: "SC_HEARTBEAT_ACK",
		102: "SC_ECHO",
		103: "SC_ERROR",
		104: "SC_PING_ACK",
		105: "SC_INFO",
		200: "CS_ENTER_ROOM",
		201: "CS_USER_PAUSE",
		202: "CS_USER_EXIT",
		203: "CS_AUTHOR_PUSH_TRAFFIC_ZERO",
		204: "CS_HORSE_RACING",
		205: "CS_RACE_LOSE",
		206: "CS_VOIP_SIGNAL",
		300: "SC_ENTER_ROOM_ACK",
		301: "SC_AUTHOR_PAUSE",
		302: "SC_AUTHOR_RESUME",
		303: "SC_AUTHOR_PUSH_TRAFFIC_ZERO",
		304: "SC_AUTHOR_HEARTBEAT_MISS",
		305: "SC_PIP_STARTED",
		306: "SC_PIP_ENDED",
		307: "SC_HORSE_RACING_ACK",
		308: "SC_VOIP_SIGNAL",
		310: "SC_FEED_PUSH",
		311: "SC_ASSISTANT_STATUS",
		312: "SC_REFRESH_WALLET",
		320: "SC_LIVE_CHAT_CALL",
		321: "SC_LIVE_CHAT_CALL_ACCEPTED",
		322: "SC_LIVE_CHAT_CALL_REJECTED",
		323: "SC_LIVE_CHAT_READY",
		324: "SC_LIVE_CHAT_GUEST_END",
		325: "SC_LIVE_CHAT_ENDED",
		326: "SC_RENDERING_MAGIC_FACE_DISABLE",
		327: "SC_RENDERING_MAGIC_FACE_ENABLE",
		330: "SC_RED_PACK_FEED",
		340: "SC_LIVE_WATCHING_LIST",
		350: "SC_LIVE_QUIZ_QUESTION_ASKED",
		351: "SC_LIVE_QUIZ_QUESTION_REVIEWED",
		352: "SC_LIVE_QUIZ_SYNC",
		353: "SC_LIVE_QUIZ_ENDED",
		354: "SC_LIVE_QUIZ_WINNERS",
		355: "SC_SUSPECTED_VIOLATION",
		360: "SC_SHOP_OPENED",
		361: "SC_SHOP_CLOSED",
		370: "SC_GUESS_OPENED",
		371: "SC_GUESS_CLOSED",
		380: "SC_PK_INVITATION",
		381: "SC_PK_STATISTIC",
		390: "SC_RIDDLE_OPENED",
		391: "SC_RIDDLE_CLOESED",
		412: "SC_RIDE_CHANGED",
		441: "SC_BET_CHANGED",
		442: "SC_BET_CLOSED",
		645: "SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE",
		758: "SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE",
	}
	PayloadType_value = map[string]int32{
		"PAYLOAD_TYPE_UNKNOWN":                 0,
		"CS_HEARTBEAT":                         1,
		"CS_ERROR":                             3,
		"CS_PING":                              4,
		"PS_HOST_INFO":                         51,
		"SC_HEARTBEAT_ACK":                     101,
		"SC_ECHO":                              102,
		"SC_ERROR":                             103,
		"SC_PING_ACK":                          104,
		"SC_INFO":                              105,
		"CS_ENTER_ROOM":                        200,
		"CS_USER_PAUSE":                        201,
		"CS_USER_EXIT":                         202,
		"CS_AUTHOR_PUSH_TRAFFIC_ZERO":          203,
		"CS_HORSE_RACING":                      204,
		"CS_RACE_LOSE":                         205,
		"CS_VOIP_SIGNAL":                       206,
		"SC_ENTER_ROOM_ACK":                    300,
		"SC_AUTHOR_PAUSE":                      301,
		"SC_AUTHOR_RESUME":                     302,
		"SC_AUTHOR_PUSH_TRAFFIC_ZERO":          303,
		"SC_AUTHOR_HEARTBEAT_MISS":             304,
		"SC_PIP_STARTED":                       305,
		"SC_PIP_ENDED":                         306,
		"SC_HORSE_RACING_ACK":                  307,
		"SC_VOIP_SIGNAL":                       308,
		"SC_FEED_PUSH":                         310,
		"SC_ASSISTANT_STATUS":                  311,
		"SC_REFRESH_WALLET":                    312,
		"SC_LIVE_CHAT_CALL":                    320,
		"SC_LIVE_CHAT_CALL_ACCEPTED":           321,
		"SC_LIVE_CHAT_CALL_REJECTED":           322,
		"SC_LIVE_CHAT_READY":                   323,
		"SC_LIVE_CHAT_GUEST_END":               324,
		"SC_LIVE_CHAT_ENDED":                   325,
		"SC_RENDERING_MAGIC_FACE_DISABLE":      326,
		"SC_RENDERING_MAGIC_FACE_ENABLE":       327,
		"SC_RED_PACK_FEED":                     330,
		"SC_LIVE_WATCHING_LIST":                340,
		"SC_LIVE_QUIZ_QUESTION_ASKED":          350,
		"SC_LIVE_QUIZ_QUESTION_REVIEWED":       351,
		"SC_LIVE_QUIZ_SYNC":                    352,
		"SC_LIVE_QUIZ_ENDED":                   353,
		"SC_LIVE_QUIZ_WINNERS":                 354,
		"SC_SUSPECTED_VIOLATION":               355,
		"SC_SHOP_OPENED":                       360,
		"SC_SHOP_CLOSED":                       361,
		"SC_GUESS_OPENED":                      370,
		"SC_GUESS_CLOSED":                      371,
		"SC_PK_INVITATION":                     380,
		"SC_PK_STATISTIC":                      381,
		"SC_RIDDLE_OPENED":                     390,
		"SC_RIDDLE_CLOESED":                    391,
		"SC_RIDE_CHANGED":                      412,
		"SC_BET_CHANGED":                       441,
		"SC_BET_CLOSED":                        442,
		"SC_LIVE_SPECIAL_ACCOUNT_CONFIG_STATE": 645,
		"SC_LIVE_WARNING_MASK_STATUS_CHANGED_AUDIENCE": 758,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[1].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[1]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{1}
}

type WebLiveAssistantType int32

const (
	WebLiveAssistantType_WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE WebLiveAssistantType = 0
	WebLiveAssistantType_SUPER                                          WebLiveAssistantType = 1
	WebLiveAssistantType_JUNIOR                                         WebLiveAssistantType = 2
)

// Enum value maps for WebLiveAssistantType.
var (
	WebLiveAssistantType_name = map[int32]string{
		0: "WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE",
		1: "SUPER",
		2: "JUNIOR",
	}
	WebLiveAssistantType_value = map[string]int32{
		"WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE": 0,
		"SUPER":  1,
		"JUNIOR": 2,
	}
)

func (x WebLiveAssistantType) Enum() *WebLiveAssistantType {
	p := new(WebLiveAssistantType)
	*p = x
	return p
}

func (x WebLiveAssistantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebLiveAssistantType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[2].Descriptor()
}

func (WebLiveAssistantType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[2]
}

func (x WebLiveAssistantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebLiveAssistantType.Descriptor instead.
func (WebLiveAssistantType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{2}
}

type WebCommentFeedShowType int32

const (
	WebCommentFeedShowType_FEED_SHOW_UNKNOWN WebCommentFeedShowType = 0
	WebCommentFeedShowType_FEED_SHOW_NORMAL  WebCommentFeedShowType = 1
	WebCommentFeedShowType_FEED_HIDDEN       WebCommentFeedShowType = 2
)

// Enum value maps for WebCommentFeedShowType.
var (
	WebCommentFeedShowType_name = map[int32]string{
		0: "FEED_SHOW_UNKNOWN",
		1: "FEED_SHOW_NORMAL",
		2: "FEED_HIDDEN",
	}
	WebCommentFeedShowType_value = map[string]int32{
		"FEED_SHOW_UNKNOWN": 0,
		"FEED_SHOW_NORMAL":  1,
		"FEED_HIDDEN":       2,
	}
)

func (x WebCommentFeedShowType) Enum() *WebCommentFeedShowType {
	p := new(WebCommentFeedShowType)
	*p = x
	return p
}

func (x WebCommentFeedShowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebCommentFeedShowType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[3].Descriptor()
}

func (WebCommentFeedShowType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[3]
}

func (x WebCommentFeedShowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebCommentFeedShowType.Descriptor instead.
func (WebCommentFeedShowType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{3}
}

type AssistantType int32

const (
	AssistantType_UNKNOWN_ASSISTANT_TYPE AssistantType = 0
	AssistantType_ASSISTANT_SUPER        AssistantType = 1
	AssistantType_ASSISTANT_JUNIOR       AssistantType = 2
)

// Enum value maps for AssistantType.
var (
	AssistantType_name = map[int32]string{
		0: "UNKNOWN_ASSISTANT_TYPE",
		1: "ASSISTANT_SUPER",
		2: "ASSISTANT_JUNIOR",
	}
	AssistantType_value = map[string]int32{
		"UNKNOWN_ASSISTANT_TYPE": 0,
		"ASSISTANT_SUPER":        1,
		"ASSISTANT_JUNIOR":       2,
	}
)

func (x AssistantType) Enum() *AssistantType {
	p := new(AssistantType)
	*p = x
	return p
}

func (x AssistantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssistantType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[4].Descriptor()
}

func (AssistantType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[4]
}

func (x AssistantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssistantType.Descriptor instead.
func (AssistantType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{4}
}

type StyleType int32

const (
	StyleType_UNKNOWN_STYLE StyleType = 0
	StyleType_BATCH_STAR_0  StyleType = 1
	StyleType_BATCH_STAR_1  StyleType = 2
	StyleType_BATCH_STAR_2  StyleType = 3
	StyleType_BATCH_STAR_3  StyleType = 4
	StyleType_BATCH_STAR_4  StyleType = 5
	StyleType_BATCH_STAR_5  StyleType = 6
	StyleType_BATCH_STAR_6  StyleType = 7
)

// Enum value maps for StyleType.
var (
	StyleType_name = map[int32]string{
		0: "UNKNOWN_STYLE",
		1: "BATCH_STAR_0",
		2: "BATCH_STAR_1",
		3: "BATCH_STAR_2",
		4: "BATCH_STAR_3",
		5: "BATCH_STAR_4",
		6: "BATCH_STAR_5",
		7: "BATCH_STAR_6",
	}
	StyleType_value = map[string]int32{
		"UNKNOWN_STYLE": 0,
		"BATCH_STAR_0":  1,
		"BATCH_STAR_1":  2,
		"BATCH_STAR_2":  3,
		"BATCH_STAR_3":  4,
		"BATCH_STAR_4":  5,
		"BATCH_STAR_5":  6,
		"BATCH_STAR_6":  7,
	}
)

func (x StyleType) Enum() *StyleType {
	p := new(StyleType)
	*p = x
	return p
}

func (x StyleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[5].Descriptor()
}

func (StyleType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[5]
}

func (x StyleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StyleType.Descriptor instead.
func (StyleType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{5}
}

type DisplayType int32

const (
	DisplayType_UNKNOWN_DISPLAY_TYPE DisplayType = 0
	DisplayType_COMMENT              DisplayType = 1
	DisplayType_ALERT                DisplayType = 2
	DisplayType_TOAST                DisplayType = 3
)

// Enum value maps for DisplayType.
var (
	DisplayType_name = map[int32]string{
		0: "UNKNOWN_DISPLAY_TYPE",
		1: "COMMENT",
		2: "ALERT",
		3: "TOAST",
	}
	DisplayType_value = map[string]int32{
		"UNKNOWN_DISPLAY_TYPE": 0,
		"COMMENT":              1,
		"ALERT":                2,
		"TOAST":                3,
	}
)

func (x DisplayType) Enum() *DisplayType {
	p := new(DisplayType)
	*p = x
	return p
}

func (x DisplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[6].Descriptor()
}

func (DisplayType) Type() protoreflect.EnumType {
	return &file_platform_kuaishou_protostub_kuaishou_proto_enumTypes[6]
}

func (x DisplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisplayType.Descriptor instead.
func (DisplayType) EnumDescriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{6}
}

// 进入房间
type CSWebEnterRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType int64                   `protobuf:"varint,1,opt,name=payloadType,proto3" json:"payloadType,omitempty"`
	Payload     *CSWebEnterRoom_Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CSWebEnterRoom) Reset() {
	*x = CSWebEnterRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSWebEnterRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSWebEnterRoom) ProtoMessage() {}

func (x *CSWebEnterRoom) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSWebEnterRoom.ProtoReflect.Descriptor instead.
func (*CSWebEnterRoom) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{0}
}

func (x *CSWebEnterRoom) GetPayloadType() int64 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *CSWebEnterRoom) GetPayload() *CSWebEnterRoom_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 进入房间后应答包
type SCWebEnterRoomAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinReconnectMs      uint64 `protobuf:"varint,1,opt,name=minReconnectMs,proto3" json:"minReconnectMs,omitempty"`
	MaxReconnectMs      uint64 `protobuf:"varint,2,opt,name=maxReconnectMs,proto3" json:"maxReconnectMs,omitempty"`
	HeartbeatIntervalMs uint64 `protobuf:"varint,3,opt,name=heartbeatIntervalMs,proto3" json:"heartbeatIntervalMs,omitempty"`
}

func (x *SCWebEnterRoomAck) Reset() {
	*x = SCWebEnterRoomAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCWebEnterRoomAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCWebEnterRoomAck) ProtoMessage() {}

func (x *SCWebEnterRoomAck) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCWebEnterRoomAck.ProtoReflect.Descriptor instead.
func (*SCWebEnterRoomAck) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{1}
}

func (x *SCWebEnterRoomAck) GetMinReconnectMs() uint64 {
	if x != nil {
		return x.MinReconnectMs
	}
	return 0
}

func (x *SCWebEnterRoomAck) GetMaxReconnectMs() uint64 {
	if x != nil {
		return x.MaxReconnectMs
	}
	return 0
}

func (x *SCWebEnterRoomAck) GetHeartbeatIntervalMs() uint64 {
	if x != nil {
		return x.HeartbeatIntervalMs
	}
	return 0
}

// 用户信息包
type SimpleUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrincipalId string `protobuf:"bytes,1,opt,name=principalId,proto3" json:"principalId,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	HeadUrl     string `protobuf:"bytes,3,opt,name=headUrl,proto3" json:"headUrl,omitempty"`
}

func (x *SimpleUserInfo) Reset() {
	*x = SimpleUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUserInfo) ProtoMessage() {}

func (x *SimpleUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUserInfo.ProtoReflect.Descriptor instead.
func (*SimpleUserInfo) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{2}
}

func (x *SimpleUserInfo) GetPrincipalId() string {
	if x != nil {
		return x.PrincipalId
	}
	return ""
}

func (x *SimpleUserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SimpleUserInfo) GetHeadUrl() string {
	if x != nil {
		return x.HeadUrl
	}
	return ""
}

// 观看用户信息
type WebWatchingUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User              *SimpleUserInfo      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Offline           bool                 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Tuhao             bool                 `protobuf:"varint,3,opt,name=tuhao,proto3" json:"tuhao,omitempty"`
	LiveAssistantType WebLiveAssistantType `protobuf:"varint,4,opt,name=liveAssistantType,proto3,enum=kuaishouPubf.WebLiveAssistantType" json:"liveAssistantType,omitempty"`
	DisplayKsCoin     string               `protobuf:"bytes,5,opt,name=displayKsCoin,proto3" json:"displayKsCoin,omitempty"`
}

func (x *WebWatchingUserInfo) Reset() {
	*x = WebWatchingUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebWatchingUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebWatchingUserInfo) ProtoMessage() {}

func (x *WebWatchingUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebWatchingUserInfo.ProtoReflect.Descriptor instead.
func (*WebWatchingUserInfo) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{3}
}

func (x *WebWatchingUserInfo) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebWatchingUserInfo) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *WebWatchingUserInfo) GetTuhao() bool {
	if x != nil {
		return x.Tuhao
	}
	return false
}

func (x *WebWatchingUserInfo) GetLiveAssistantType() WebLiveAssistantType {
	if x != nil {
		return x.LiveAssistantType
	}
	return WebLiveAssistantType_WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE
}

func (x *WebWatchingUserInfo) GetDisplayKsCoin() string {
	if x != nil {
		return x.DisplayKsCoin
	}
	return ""
}

// 观看用户数
type SCWebLiveWatchingUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WatchingUser         []*WebWatchingUserInfo `protobuf:"bytes,1,rep,name=watchingUser,proto3" json:"watchingUser,omitempty"`
	DisplayWatchingCount string                 `protobuf:"bytes,2,opt,name=displayWatchingCount,proto3" json:"displayWatchingCount,omitempty"`
	PendingDuration      uint64                 `protobuf:"varint,3,opt,name=pendingDuration,proto3" json:"pendingDuration,omitempty"`
}

func (x *SCWebLiveWatchingUsers) Reset() {
	*x = SCWebLiveWatchingUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCWebLiveWatchingUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCWebLiveWatchingUsers) ProtoMessage() {}

func (x *SCWebLiveWatchingUsers) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCWebLiveWatchingUsers.ProtoReflect.Descriptor instead.
func (*SCWebLiveWatchingUsers) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{4}
}

func (x *SCWebLiveWatchingUsers) GetWatchingUser() []*WebWatchingUserInfo {
	if x != nil {
		return x.WatchingUser
	}
	return nil
}

func (x *SCWebLiveWatchingUsers) GetDisplayWatchingCount() string {
	if x != nil {
		return x.DisplayWatchingCount
	}
	return ""
}

func (x *SCWebLiveWatchingUsers) GetPendingDuration() uint64 {
	if x != nil {
		return x.PendingDuration
	}
	return 0
}

// 心跳包
type CSWebHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType int64                   `protobuf:"varint,1,opt,name=payloadType,proto3" json:"payloadType,omitempty"`
	Payload     *CSWebHeartbeat_Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CSWebHeartbeat) Reset() {
	*x = CSWebHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSWebHeartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSWebHeartbeat) ProtoMessage() {}

func (x *CSWebHeartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSWebHeartbeat.ProtoReflect.Descriptor instead.
func (*CSWebHeartbeat) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{5}
}

func (x *CSWebHeartbeat) GetPayloadType() int64 {
	if x != nil {
		return x.PayloadType
	}
	return 0
}

func (x *CSWebHeartbeat) GetPayload() *CSWebHeartbeat_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 消息主体包
type SocketMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadType     PayloadType     `protobuf:"varint,1,opt,name=payloadType,proto3,enum=kuaishouPubf.PayloadType" json:"payloadType,omitempty"`
	CompressionType CompressionType `protobuf:"varint,2,opt,name=compressionType,proto3,enum=kuaishouPubf.CompressionType" json:"compressionType,omitempty"`
	Payload         []byte          `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *SocketMessage) Reset() {
	*x = SocketMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketMessage) ProtoMessage() {}

func (x *SocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketMessage.ProtoReflect.Descriptor instead.
func (*SocketMessage) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{6}
}

func (x *SocketMessage) GetPayloadType() PayloadType {
	if x != nil {
		return x.PayloadType
	}
	return PayloadType_PAYLOAD_TYPE_UNKNOWN
}

func (x *SocketMessage) GetCompressionType() CompressionType {
	if x != nil {
		return x.CompressionType
	}
	return CompressionType_COMPRESSION_TYPE_UNKNOWN
}

func (x *SocketMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 心跳包响应
type SCHeartbeatAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientTimestamp uint64 `protobuf:"varint,2,opt,name=clientTimestamp,proto3" json:"clientTimestamp,omitempty"`
}

func (x *SCHeartbeatAck) Reset() {
	*x = SCHeartbeatAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCHeartbeatAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCHeartbeatAck) ProtoMessage() {}

func (x *SCHeartbeatAck) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCHeartbeatAck.ProtoReflect.Descriptor instead.
func (*SCHeartbeatAck) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{7}
}

func (x *SCHeartbeatAck) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SCHeartbeatAck) GetClientTimestamp() uint64 {
	if x != nil {
		return x.ClientTimestamp
	}
	return 0
}

type WebCommentFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User        *SimpleUserInfo        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content     string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	DeviceHash  string                 `protobuf:"bytes,4,opt,name=deviceHash,proto3" json:"deviceHash,omitempty"`
	SortRank    uint64                 `protobuf:"varint,5,opt,name=sortRank,proto3" json:"sortRank,omitempty"`
	Color       string                 `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	ShowType    WebCommentFeedShowType `protobuf:"varint,7,opt,name=showType,proto3,enum=kuaishouPubf.WebCommentFeedShowType" json:"showType,omitempty"`
	SenderState *LiveAudienceState     `protobuf:"bytes,8,opt,name=senderState,proto3" json:"senderState,omitempty"`
}

func (x *WebCommentFeed) Reset() {
	*x = WebCommentFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebCommentFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebCommentFeed) ProtoMessage() {}

func (x *WebCommentFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebCommentFeed.ProtoReflect.Descriptor instead.
func (*WebCommentFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{8}
}

func (x *WebCommentFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebCommentFeed) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebCommentFeed) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebCommentFeed) GetDeviceHash() string {
	if x != nil {
		return x.DeviceHash
	}
	return ""
}

func (x *WebCommentFeed) GetSortRank() uint64 {
	if x != nil {
		return x.SortRank
	}
	return 0
}

func (x *WebCommentFeed) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *WebCommentFeed) GetShowType() WebCommentFeedShowType {
	if x != nil {
		return x.ShowType
	}
	return WebCommentFeedShowType_FEED_SHOW_UNKNOWN
}

func (x *WebCommentFeed) GetSenderState() *LiveAudienceState {
	if x != nil {
		return x.SenderState
	}
	return nil
}

type LiveAudienceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFromFansTop          bool                `protobuf:"varint,1,opt,name=isFromFansTop,proto3" json:"isFromFansTop,omitempty"`
	IsKoi                  bool                `protobuf:"varint,2,opt,name=isKoi,proto3" json:"isKoi,omitempty"`
	AssistantType          AssistantType       `protobuf:"varint,3,opt,name=assistantType,proto3,enum=kuaishouPubf.AssistantType" json:"assistantType,omitempty"`
	FansGroupIntimacyLevel uint32              `protobuf:"varint,4,opt,name=fansGroupIntimacyLevel,proto3" json:"fansGroupIntimacyLevel,omitempty"`
	Nameplate              *GzoneNameplate     `protobuf:"bytes,5,opt,name=nameplate,proto3" json:"nameplate,omitempty"`
	LiveFansGroupState     *LiveFansGroupState `protobuf:"bytes,6,opt,name=liveFansGroupState,proto3" json:"liveFansGroupState,omitempty"`
	WealthGrade            uint32              `protobuf:"varint,7,opt,name=wealthGrade,proto3" json:"wealthGrade,omitempty"`
	BadgeKey               string              `protobuf:"bytes,8,opt,name=badgeKey,proto3" json:"badgeKey,omitempty"`
}

func (x *LiveAudienceState) Reset() {
	*x = LiveAudienceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveAudienceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveAudienceState) ProtoMessage() {}

func (x *LiveAudienceState) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveAudienceState.ProtoReflect.Descriptor instead.
func (*LiveAudienceState) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{9}
}

func (x *LiveAudienceState) GetIsFromFansTop() bool {
	if x != nil {
		return x.IsFromFansTop
	}
	return false
}

func (x *LiveAudienceState) GetIsKoi() bool {
	if x != nil {
		return x.IsKoi
	}
	return false
}

func (x *LiveAudienceState) GetAssistantType() AssistantType {
	if x != nil {
		return x.AssistantType
	}
	return AssistantType_UNKNOWN_ASSISTANT_TYPE
}

func (x *LiveAudienceState) GetFansGroupIntimacyLevel() uint32 {
	if x != nil {
		return x.FansGroupIntimacyLevel
	}
	return 0
}

func (x *LiveAudienceState) GetNameplate() *GzoneNameplate {
	if x != nil {
		return x.Nameplate
	}
	return nil
}

func (x *LiveAudienceState) GetLiveFansGroupState() *LiveFansGroupState {
	if x != nil {
		return x.LiveFansGroupState
	}
	return nil
}

func (x *LiveAudienceState) GetWealthGrade() uint32 {
	if x != nil {
		return x.WealthGrade
	}
	return 0
}

func (x *LiveAudienceState) GetBadgeKey() string {
	if x != nil {
		return x.BadgeKey
	}
	return ""
}

type LiveFansGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntimacyLevel          uint32 `protobuf:"varint,1,opt,name=intimacyLevel,proto3" json:"intimacyLevel,omitempty"`
	EnterRoomSpecialEffect uint32 `protobuf:"varint,2,opt,name=enterRoomSpecialEffect,proto3" json:"enterRoomSpecialEffect,omitempty"`
}

func (x *LiveFansGroupState) Reset() {
	*x = LiveFansGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFansGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFansGroupState) ProtoMessage() {}

func (x *LiveFansGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFansGroupState.ProtoReflect.Descriptor instead.
func (*LiveFansGroupState) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{10}
}

func (x *LiveFansGroupState) GetIntimacyLevel() uint32 {
	if x != nil {
		return x.IntimacyLevel
	}
	return 0
}

func (x *LiveFansGroupState) GetEnterRoomSpecialEffect() uint32 {
	if x != nil {
		return x.EnterRoomSpecialEffect
	}
	return 0
}

type GzoneNameplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Urls []*PicUrl `protobuf:"bytes,3,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *GzoneNameplate) Reset() {
	*x = GzoneNameplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GzoneNameplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GzoneNameplate) ProtoMessage() {}

func (x *GzoneNameplate) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GzoneNameplate.ProtoReflect.Descriptor instead.
func (*GzoneNameplate) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{11}
}

func (x *GzoneNameplate) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GzoneNameplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GzoneNameplate) GetUrls() []*PicUrl {
	if x != nil {
		return x.Urls
	}
	return nil
}

type PicUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cdn        string `protobuf:"bytes,1,opt,name=cdn,proto3" json:"cdn,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	UrlPattern string `protobuf:"bytes,3,opt,name=urlPattern,proto3" json:"urlPattern,omitempty"`
	Ip         string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *PicUrl) Reset() {
	*x = PicUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PicUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PicUrl) ProtoMessage() {}

func (x *PicUrl) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PicUrl.ProtoReflect.Descriptor instead.
func (*PicUrl) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{12}
}

func (x *PicUrl) GetCdn() string {
	if x != nil {
		return x.Cdn
	}
	return ""
}

func (x *PicUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PicUrl) GetUrlPattern() string {
	if x != nil {
		return x.UrlPattern
	}
	return ""
}

func (x *PicUrl) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type SCWebFeedPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayWatchingCount string                 `protobuf:"bytes,1,opt,name=displayWatchingCount,proto3" json:"displayWatchingCount,omitempty"`
	DisplayLikeCount     string                 `protobuf:"bytes,2,opt,name=displayLikeCount,proto3" json:"displayLikeCount,omitempty"`
	PendingLikeCount     uint64                 `protobuf:"varint,3,opt,name=pendingLikeCount,proto3" json:"pendingLikeCount,omitempty"`
	PushInterval         uint64                 `protobuf:"varint,4,opt,name=pushInterval,proto3" json:"pushInterval,omitempty"`
	CommentFeeds         []*WebCommentFeed      `protobuf:"bytes,5,rep,name=commentFeeds,proto3" json:"commentFeeds,omitempty"`
	CommentCursor        string                 `protobuf:"bytes,6,opt,name=commentCursor,proto3" json:"commentCursor,omitempty"`
	ComboCommentFeed     []*WebComboCommentFeed `protobuf:"bytes,7,rep,name=comboCommentFeed,proto3" json:"comboCommentFeed,omitempty"`
	LikeFeeds            []*WebLikeFeed         `protobuf:"bytes,8,rep,name=likeFeeds,proto3" json:"likeFeeds,omitempty"`
	GiftFeeds            []*WebGiftFeed         `protobuf:"bytes,9,rep,name=giftFeeds,proto3" json:"giftFeeds,omitempty"`
	GiftCursor           string                 `protobuf:"bytes,10,opt,name=giftCursor,proto3" json:"giftCursor,omitempty"`
	SystemNoticeFeeds    []*WebSystemNoticeFeed `protobuf:"bytes,11,rep,name=systemNoticeFeeds,proto3" json:"systemNoticeFeeds,omitempty"`
	ShareFeeds           []*WebShareFeed        `protobuf:"bytes,12,rep,name=shareFeeds,proto3" json:"shareFeeds,omitempty"`
}

func (x *SCWebFeedPush) Reset() {
	*x = SCWebFeedPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SCWebFeedPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCWebFeedPush) ProtoMessage() {}

func (x *SCWebFeedPush) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCWebFeedPush.ProtoReflect.Descriptor instead.
func (*SCWebFeedPush) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{13}
}

func (x *SCWebFeedPush) GetDisplayWatchingCount() string {
	if x != nil {
		return x.DisplayWatchingCount
	}
	return ""
}

func (x *SCWebFeedPush) GetDisplayLikeCount() string {
	if x != nil {
		return x.DisplayLikeCount
	}
	return ""
}

func (x *SCWebFeedPush) GetPendingLikeCount() uint64 {
	if x != nil {
		return x.PendingLikeCount
	}
	return 0
}

func (x *SCWebFeedPush) GetPushInterval() uint64 {
	if x != nil {
		return x.PushInterval
	}
	return 0
}

func (x *SCWebFeedPush) GetCommentFeeds() []*WebCommentFeed {
	if x != nil {
		return x.CommentFeeds
	}
	return nil
}

func (x *SCWebFeedPush) GetCommentCursor() string {
	if x != nil {
		return x.CommentCursor
	}
	return ""
}

func (x *SCWebFeedPush) GetComboCommentFeed() []*WebComboCommentFeed {
	if x != nil {
		return x.ComboCommentFeed
	}
	return nil
}

func (x *SCWebFeedPush) GetLikeFeeds() []*WebLikeFeed {
	if x != nil {
		return x.LikeFeeds
	}
	return nil
}

func (x *SCWebFeedPush) GetGiftFeeds() []*WebGiftFeed {
	if x != nil {
		return x.GiftFeeds
	}
	return nil
}

func (x *SCWebFeedPush) GetGiftCursor() string {
	if x != nil {
		return x.GiftCursor
	}
	return ""
}

func (x *SCWebFeedPush) GetSystemNoticeFeeds() []*WebSystemNoticeFeed {
	if x != nil {
		return x.SystemNoticeFeeds
	}
	return nil
}

func (x *SCWebFeedPush) GetShareFeeds() []*WebShareFeed {
	if x != nil {
		return x.ShareFeeds
	}
	return nil
}

type WebShareFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User               *SimpleUserInfo      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Time               uint64               `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	ThirdPartyPlatform uint32               `protobuf:"varint,4,opt,name=thirdPartyPlatform,proto3" json:"thirdPartyPlatform,omitempty"`
	SortRank           uint64               `protobuf:"varint,5,opt,name=sortRank,proto3" json:"sortRank,omitempty"`
	LiveAssistantType  WebLiveAssistantType `protobuf:"varint,6,opt,name=liveAssistantType,proto3,enum=kuaishouPubf.WebLiveAssistantType" json:"liveAssistantType,omitempty"`
	DeviceHash         string               `protobuf:"bytes,7,opt,name=deviceHash,proto3" json:"deviceHash,omitempty"`
}

func (x *WebShareFeed) Reset() {
	*x = WebShareFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebShareFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebShareFeed) ProtoMessage() {}

func (x *WebShareFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebShareFeed.ProtoReflect.Descriptor instead.
func (*WebShareFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{14}
}

func (x *WebShareFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebShareFeed) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebShareFeed) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WebShareFeed) GetThirdPartyPlatform() uint32 {
	if x != nil {
		return x.ThirdPartyPlatform
	}
	return 0
}

func (x *WebShareFeed) GetSortRank() uint64 {
	if x != nil {
		return x.SortRank
	}
	return 0
}

func (x *WebShareFeed) GetLiveAssistantType() WebLiveAssistantType {
	if x != nil {
		return x.LiveAssistantType
	}
	return WebLiveAssistantType_WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE
}

func (x *WebShareFeed) GetDeviceHash() string {
	if x != nil {
		return x.DeviceHash
	}
	return ""
}

type WebSystemNoticeFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User            *SimpleUserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Time            uint64          `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Content         string          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	DisplayDuration uint64          `protobuf:"varint,5,opt,name=displayDuration,proto3" json:"displayDuration,omitempty"`
	SortRank        uint64          `protobuf:"varint,6,opt,name=sortRank,proto3" json:"sortRank,omitempty"`
	DisplayType     DisplayType     `protobuf:"varint,7,opt,name=displayType,proto3,enum=kuaishouPubf.DisplayType" json:"displayType,omitempty"`
}

func (x *WebSystemNoticeFeed) Reset() {
	*x = WebSystemNoticeFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSystemNoticeFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSystemNoticeFeed) ProtoMessage() {}

func (x *WebSystemNoticeFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSystemNoticeFeed.ProtoReflect.Descriptor instead.
func (*WebSystemNoticeFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{15}
}

func (x *WebSystemNoticeFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebSystemNoticeFeed) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebSystemNoticeFeed) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WebSystemNoticeFeed) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebSystemNoticeFeed) GetDisplayDuration() uint64 {
	if x != nil {
		return x.DisplayDuration
	}
	return 0
}

func (x *WebSystemNoticeFeed) GetSortRank() uint64 {
	if x != nil {
		return x.SortRank
	}
	return 0
}

func (x *WebSystemNoticeFeed) GetDisplayType() DisplayType {
	if x != nil {
		return x.DisplayType
	}
	return DisplayType_UNKNOWN_DISPLAY_TYPE
}

type WebGiftFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                *SimpleUserInfo      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Time                uint64               `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	GiftId              uint32               `protobuf:"varint,4,opt,name=giftId,proto3" json:"giftId,omitempty"`
	SortRank            uint64               `protobuf:"varint,5,opt,name=sortRank,proto3" json:"sortRank,omitempty"`
	MergeKey            string               `protobuf:"bytes,6,opt,name=mergeKey,proto3" json:"mergeKey,omitempty"`
	BatchSize           uint32               `protobuf:"varint,7,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	ComboCount          uint32               `protobuf:"varint,8,opt,name=comboCount,proto3" json:"comboCount,omitempty"`
	Rank                uint32               `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
	ExpireDuration      uint64               `protobuf:"varint,10,opt,name=expireDuration,proto3" json:"expireDuration,omitempty"`
	ClientTimestamp     uint64               `protobuf:"varint,11,opt,name=clientTimestamp,proto3" json:"clientTimestamp,omitempty"`
	SlotDisplayDuration uint64               `protobuf:"varint,12,opt,name=slotDisplayDuration,proto3" json:"slotDisplayDuration,omitempty"`
	StarLevel           uint32               `protobuf:"varint,13,opt,name=starLevel,proto3" json:"starLevel,omitempty"`
	StyleType           StyleType            `protobuf:"varint,14,opt,name=styleType,proto3,enum=kuaishouPubf.StyleType" json:"styleType,omitempty"`
	LiveAssistantType   WebLiveAssistantType `protobuf:"varint,15,opt,name=liveAssistantType,proto3,enum=kuaishouPubf.WebLiveAssistantType" json:"liveAssistantType,omitempty"`
	DeviceHash          string               `protobuf:"bytes,16,opt,name=deviceHash,proto3" json:"deviceHash,omitempty"`
	DanmakuDisplay      bool                 `protobuf:"varint,17,opt,name=danmakuDisplay,proto3" json:"danmakuDisplay,omitempty"`
}

func (x *WebGiftFeed) Reset() {
	*x = WebGiftFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebGiftFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebGiftFeed) ProtoMessage() {}

func (x *WebGiftFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebGiftFeed.ProtoReflect.Descriptor instead.
func (*WebGiftFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{16}
}

func (x *WebGiftFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebGiftFeed) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebGiftFeed) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WebGiftFeed) GetGiftId() uint32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *WebGiftFeed) GetSortRank() uint64 {
	if x != nil {
		return x.SortRank
	}
	return 0
}

func (x *WebGiftFeed) GetMergeKey() string {
	if x != nil {
		return x.MergeKey
	}
	return ""
}

func (x *WebGiftFeed) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *WebGiftFeed) GetComboCount() uint32 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

func (x *WebGiftFeed) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *WebGiftFeed) GetExpireDuration() uint64 {
	if x != nil {
		return x.ExpireDuration
	}
	return 0
}

func (x *WebGiftFeed) GetClientTimestamp() uint64 {
	if x != nil {
		return x.ClientTimestamp
	}
	return 0
}

func (x *WebGiftFeed) GetSlotDisplayDuration() uint64 {
	if x != nil {
		return x.SlotDisplayDuration
	}
	return 0
}

func (x *WebGiftFeed) GetStarLevel() uint32 {
	if x != nil {
		return x.StarLevel
	}
	return 0
}

func (x *WebGiftFeed) GetStyleType() StyleType {
	if x != nil {
		return x.StyleType
	}
	return StyleType_UNKNOWN_STYLE
}

func (x *WebGiftFeed) GetLiveAssistantType() WebLiveAssistantType {
	if x != nil {
		return x.LiveAssistantType
	}
	return WebLiveAssistantType_WEB_LIVE_ASSISTANT_TYPE_UNKNOWN_ASSISTANT_TYPE
}

func (x *WebGiftFeed) GetDeviceHash() string {
	if x != nil {
		return x.DeviceHash
	}
	return ""
}

func (x *WebGiftFeed) GetDanmakuDisplay() bool {
	if x != nil {
		return x.DanmakuDisplay
	}
	return false
}

type WebLikeFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User       *SimpleUserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	SortRank   uint64          `protobuf:"varint,3,opt,name=sortRank,proto3" json:"sortRank,omitempty"`
	DeviceHash string          `protobuf:"bytes,4,opt,name=deviceHash,proto3" json:"deviceHash,omitempty"`
}

func (x *WebLikeFeed) Reset() {
	*x = WebLikeFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebLikeFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebLikeFeed) ProtoMessage() {}

func (x *WebLikeFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebLikeFeed.ProtoReflect.Descriptor instead.
func (*WebLikeFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{17}
}

func (x *WebLikeFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebLikeFeed) GetUser() *SimpleUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *WebLikeFeed) GetSortRank() uint64 {
	if x != nil {
		return x.SortRank
	}
	return 0
}

func (x *WebLikeFeed) GetDeviceHash() string {
	if x != nil {
		return x.DeviceHash
	}
	return ""
}

type WebComboCommentFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ComboCount uint32 `protobuf:"varint,3,opt,name=comboCount,proto3" json:"comboCount,omitempty"`
}

func (x *WebComboCommentFeed) Reset() {
	*x = WebComboCommentFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebComboCommentFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebComboCommentFeed) ProtoMessage() {}

func (x *WebComboCommentFeed) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebComboCommentFeed.ProtoReflect.Descriptor instead.
func (*WebComboCommentFeed) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{18}
}

func (x *WebComboCommentFeed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WebComboCommentFeed) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WebComboCommentFeed) GetComboCount() uint32 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

type CSWebEnterRoom_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	LiveStreamId   string `protobuf:"bytes,2,opt,name=liveStreamId,proto3" json:"liveStreamId,omitempty"`
	ReconnectCount uint32 `protobuf:"varint,3,opt,name=reconnectCount,proto3" json:"reconnectCount,omitempty"`
	LastErrorCode  uint32 `protobuf:"varint,4,opt,name=lastErrorCode,proto3" json:"lastErrorCode,omitempty"`
	ExpTag         string `protobuf:"bytes,5,opt,name=expTag,proto3" json:"expTag,omitempty"`
	Attach         string `protobuf:"bytes,6,opt,name=attach,proto3" json:"attach,omitempty"`
	PageId         string `protobuf:"bytes,7,opt,name=pageId,proto3" json:"pageId,omitempty"`
}

func (x *CSWebEnterRoom_Payload) Reset() {
	*x = CSWebEnterRoom_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSWebEnterRoom_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSWebEnterRoom_Payload) ProtoMessage() {}

func (x *CSWebEnterRoom_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSWebEnterRoom_Payload.ProtoReflect.Descriptor instead.
func (*CSWebEnterRoom_Payload) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CSWebEnterRoom_Payload) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CSWebEnterRoom_Payload) GetLiveStreamId() string {
	if x != nil {
		return x.LiveStreamId
	}
	return ""
}

func (x *CSWebEnterRoom_Payload) GetReconnectCount() uint32 {
	if x != nil {
		return x.ReconnectCount
	}
	return 0
}

func (x *CSWebEnterRoom_Payload) GetLastErrorCode() uint32 {
	if x != nil {
		return x.LastErrorCode
	}
	return 0
}

func (x *CSWebEnterRoom_Payload) GetExpTag() string {
	if x != nil {
		return x.ExpTag
	}
	return ""
}

func (x *CSWebEnterRoom_Payload) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *CSWebEnterRoom_Payload) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

type CSWebHeartbeat_Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CSWebHeartbeat_Payload) Reset() {
	*x = CSWebHeartbeat_Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSWebHeartbeat_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSWebHeartbeat_Payload) ProtoMessage() {}

func (x *CSWebHeartbeat_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSWebHeartbeat_Payload.ProtoReflect.Descriptor instead.
func (*CSWebHeartbeat_Payload) Descriptor() ([]byte, []int) {
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CSWebHeartbeat_Payload) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_platform_kuaishou_protostub_kuaishou_proto protoreflect.FileDescriptor

var file_platform_kuaishou_protostub_kuaishou_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6b, 0x75, 0x61, 0x69, 0x73,
	0x68, 0x6f, 0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x75, 0x62, 0x2f, 0x6b, 0x75,
	0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6b, 0x75,
	0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x22, 0xce, 0x02, 0x0a, 0x0e, 0x43,
	0x53, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x43, 0x53, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x2e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0xd9, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x54, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x11,
	0x53, 0x43, 0x57, 0x65, 0x62, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x63,
	0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e,
	0x63, 0x69, 0x70, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xef, 0x01,
	0x0a, 0x13, 0x57, 0x65, 0x62, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75,
	0x62, 0x66, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x75, 0x68, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x74, 0x75, 0x68, 0x61, 0x6f, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62,
	0x66, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4b, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4b, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x22,
	0xbd, 0x01, 0x0a, 0x16, 0x53, 0x43, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x57, 0x65, 0x62, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x9b, 0x01, 0x0a, 0x0e, 0x43, 0x53, 0x57, 0x65, 0x62, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75,
	0x50, 0x75, 0x62, 0x66, 0x2e, 0x43, 0x53, 0x57, 0x65, 0x62, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x27, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xaf, 0x01,
	0x0a, 0x0d, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50,
	0x75, 0x62, 0x66, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75,
	0x50, 0x75, 0x62, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x58, 0x0a, 0x0e, 0x53, 0x43, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc3, 0x02, 0x0a, 0x0e, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x61,
	0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6b,
	0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57, 0x65, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x96, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x61, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x6e, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x4b, 0x6f, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4b, 0x6f,
	0x69, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73,
	0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x66, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x47,
	0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65,
	0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50,
	0x75, 0x62, 0x66, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x46, 0x61, 0x6e, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x77, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x72, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65,
	0x46, 0x61, 0x6e, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x5e, 0x0a, 0x0e,
	0x47, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x5c, 0x0a, 0x06,
	0x50, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x64, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x64, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x72,
	0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x72, 0x6c, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x95, 0x05, 0x0a, 0x0d, 0x53,
	0x43, 0x57, 0x65, 0x62, 0x46, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62,
	0x66, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57, 0x65,
	0x62, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x65, 0x65, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f,
	0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x67, 0x69, 0x66, 0x74, 0x46, 0x65, 0x65, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57,
	0x65, 0x62, 0x47, 0x69, 0x66, 0x74, 0x46, 0x65, 0x65, 0x64, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x57, 0x65, 0x62, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x61,
	0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x73, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x57, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6b, 0x75, 0x61,
	0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xf8, 0x04, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x47, 0x69, 0x66, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x66, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x6c, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x6c, 0x6f, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x09,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x57, 0x65,
	0x62, 0x4c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64,
	0x61, 0x6e, 0x6d, 0x61, 0x6b, 0x75, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x8b, 0x01,
	0x0a, 0x0b, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75,
	0x61, 0x69, 0x73, 0x68, 0x6f, 0x75, 0x50, 0x75, 0x62, 0x66, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x5f, 0x0a, 0x13, 0x57,
	0x65, 0x62, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x4c, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x98, 0x0b, 0x0a, 0x0b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x42, 0x45, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x53, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x53, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42,
	0x45, 0x41, 0x54, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x5f,
	0x45, 0x43, 0x48, 0x4f, 0x10, 0x66, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x4b, 0x10, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x69, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x10, 0xc8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x53, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0xca, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x43, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f,
	0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0xcb, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x53, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x49,
	0x4e, 0x47, 0x10, 0xcc, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x53, 0x5f, 0x52, 0x41, 0x43, 0x45,
	0x5f, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0xcd, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x53, 0x5f, 0x56,
	0x4f, 0x49, 0x50, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0xce, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x41,
	0x43, 0x4b, 0x10, 0xac, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0xad, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x53,
	0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10,
	0xae, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f,
	0x50, 0x55, 0x53, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0xaf, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x43, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x10, 0xb0, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x50, 0x49, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0xb1, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x43, 0x5f, 0x50,
	0x49, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xb2, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x53,
	0x43, 0x5f, 0x48, 0x4f, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x41,
	0x43, 0x4b, 0x10, 0xb3, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x56, 0x4f, 0x49, 0x50,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0xb4, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x43,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0xb6, 0x02, 0x12, 0x18, 0x0a,
	0x13, 0x53, 0x43, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0xb7, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x52, 0x45,
	0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0xb8, 0x02, 0x12,
	0x16, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0xc0, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x43, 0x5f, 0x4c, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0xc1, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x43, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0xc2, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x43, 0x5f,
	0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0xc3, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xc4, 0x02, 0x12,
	0x17, 0x0a, 0x12, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xc5, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x43, 0x5f, 0x52,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x5f, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xc6, 0x02, 0x12, 0x23,
	0x0a, 0x1e, 0x53, 0x43, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x41, 0x47, 0x49, 0x43, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0xc7, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x43, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0xca, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x43,
	0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0xd4, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0xde, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x43, 0x5f, 0x4c,
	0x49, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0xdf, 0x02, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0xe0, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xe1, 0x02, 0x12, 0x19,
	0x0a, 0x14, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x57,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x53, 0x10, 0xe2, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x43, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xe3, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x53, 0x48, 0x4f,
	0x50, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0xe8, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x53,
	0x43, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xe9, 0x02,
	0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x45, 0x44, 0x10, 0xf2, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x47, 0x55, 0x45,
	0x53, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0xf3, 0x02, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x43, 0x5f, 0x50, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0xfc, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x50, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0xfd, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x53, 0x43, 0x5f,
	0x52, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x86, 0x03,
	0x12, 0x16, 0x0a, 0x11, 0x53, 0x43, 0x5f, 0x52, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x45, 0x53, 0x45, 0x44, 0x10, 0x87, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x43, 0x5f, 0x52,
	0x49, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x9c, 0x03, 0x12, 0x13,
	0x0a, 0x0e, 0x53, 0x43, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0xb9, 0x03, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x43, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0xba, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x43, 0x5f, 0x4c, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x85, 0x05, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0xf6, 0x05, 0x2a, 0x61, 0x0a, 0x14, 0x57, 0x65, 0x62, 0x4c, 0x69, 0x76, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a,
	0x2e, 0x57, 0x45, 0x42, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x55, 0x50, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4a, 0x55, 0x4e, 0x49, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x16, 0x57, 0x65, 0x62, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02,
	0x2a, 0x56, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f,
	0x4a, 0x55, 0x4e, 0x49, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x9c, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x32, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x33, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x34, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x5f, 0x35, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x36, 0x10, 0x07, 0x2a, 0x4a, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x42, 0x16, 0x5a, 0x14, 0x2e, 0x2f, 0x6b, 0x75, 0x61, 0x69, 0x73, 0x68, 0x6f,
	0x75, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x74, 0x75, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_platform_kuaishou_protostub_kuaishou_proto_rawDescOnce sync.Once
	file_platform_kuaishou_protostub_kuaishou_proto_rawDescData = file_platform_kuaishou_protostub_kuaishou_proto_rawDesc
)

func file_platform_kuaishou_protostub_kuaishou_proto_rawDescGZIP() []byte {
	file_platform_kuaishou_protostub_kuaishou_proto_rawDescOnce.Do(func() {
		file_platform_kuaishou_protostub_kuaishou_proto_rawDescData = protoimpl.X.CompressGZIP(file_platform_kuaishou_protostub_kuaishou_proto_rawDescData)
	})
	return file_platform_kuaishou_protostub_kuaishou_proto_rawDescData
}

var file_platform_kuaishou_protostub_kuaishou_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_platform_kuaishou_protostub_kuaishou_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_platform_kuaishou_protostub_kuaishou_proto_goTypes = []interface{}{
	(CompressionType)(0),           // 0: kuaishouPubf.CompressionType
	(PayloadType)(0),               // 1: kuaishouPubf.PayloadType
	(WebLiveAssistantType)(0),      // 2: kuaishouPubf.WebLiveAssistantType
	(WebCommentFeedShowType)(0),    // 3: kuaishouPubf.WebCommentFeedShowType
	(AssistantType)(0),             // 4: kuaishouPubf.AssistantType
	(StyleType)(0),                 // 5: kuaishouPubf.StyleType
	(DisplayType)(0),               // 6: kuaishouPubf.DisplayType
	(*CSWebEnterRoom)(nil),         // 7: kuaishouPubf.CSWebEnterRoom
	(*SCWebEnterRoomAck)(nil),      // 8: kuaishouPubf.SCWebEnterRoomAck
	(*SimpleUserInfo)(nil),         // 9: kuaishouPubf.SimpleUserInfo
	(*WebWatchingUserInfo)(nil),    // 10: kuaishouPubf.WebWatchingUserInfo
	(*SCWebLiveWatchingUsers)(nil), // 11: kuaishouPubf.SCWebLiveWatchingUsers
	(*CSWebHeartbeat)(nil),         // 12: kuaishouPubf.CSWebHeartbeat
	(*SocketMessage)(nil),          // 13: kuaishouPubf.SocketMessage
	(*SCHeartbeatAck)(nil),         // 14: kuaishouPubf.SCHeartbeatAck
	(*WebCommentFeed)(nil),         // 15: kuaishouPubf.WebCommentFeed
	(*LiveAudienceState)(nil),      // 16: kuaishouPubf.LiveAudienceState
	(*LiveFansGroupState)(nil),     // 17: kuaishouPubf.LiveFansGroupState
	(*GzoneNameplate)(nil),         // 18: kuaishouPubf.GzoneNameplate
	(*PicUrl)(nil),                 // 19: kuaishouPubf.PicUrl
	(*SCWebFeedPush)(nil),          // 20: kuaishouPubf.SCWebFeedPush
	(*WebShareFeed)(nil),           // 21: kuaishouPubf.WebShareFeed
	(*WebSystemNoticeFeed)(nil),    // 22: kuaishouPubf.WebSystemNoticeFeed
	(*WebGiftFeed)(nil),            // 23: kuaishouPubf.WebGiftFeed
	(*WebLikeFeed)(nil),            // 24: kuaishouPubf.WebLikeFeed
	(*WebComboCommentFeed)(nil),    // 25: kuaishouPubf.WebComboCommentFeed
	(*CSWebEnterRoom_Payload)(nil), // 26: kuaishouPubf.CSWebEnterRoom.Payload
	(*CSWebHeartbeat_Payload)(nil), // 27: kuaishouPubf.CSWebHeartbeat.Payload
}
var file_platform_kuaishou_protostub_kuaishou_proto_depIdxs = []int32{
	26, // 0: kuaishouPubf.CSWebEnterRoom.payload:type_name -> kuaishouPubf.CSWebEnterRoom.Payload
	9,  // 1: kuaishouPubf.WebWatchingUserInfo.user:type_name -> kuaishouPubf.SimpleUserInfo
	2,  // 2: kuaishouPubf.WebWatchingUserInfo.liveAssistantType:type_name -> kuaishouPubf.WebLiveAssistantType
	10, // 3: kuaishouPubf.SCWebLiveWatchingUsers.watchingUser:type_name -> kuaishouPubf.WebWatchingUserInfo
	27, // 4: kuaishouPubf.CSWebHeartbeat.payload:type_name -> kuaishouPubf.CSWebHeartbeat.Payload
	1,  // 5: kuaishouPubf.SocketMessage.payloadType:type_name -> kuaishouPubf.PayloadType
	0,  // 6: kuaishouPubf.SocketMessage.compressionType:type_name -> kuaishouPubf.CompressionType
	9,  // 7: kuaishouPubf.WebCommentFeed.user:type_name -> kuaishouPubf.SimpleUserInfo
	3,  // 8: kuaishouPubf.WebCommentFeed.showType:type_name -> kuaishouPubf.WebCommentFeedShowType
	16, // 9: kuaishouPubf.WebCommentFeed.senderState:type_name -> kuaishouPubf.LiveAudienceState
	4,  // 10: kuaishouPubf.LiveAudienceState.assistantType:type_name -> kuaishouPubf.AssistantType
	18, // 11: kuaishouPubf.LiveAudienceState.nameplate:type_name -> kuaishouPubf.GzoneNameplate
	17, // 12: kuaishouPubf.LiveAudienceState.liveFansGroupState:type_name -> kuaishouPubf.LiveFansGroupState
	19, // 13: kuaishouPubf.GzoneNameplate.urls:type_name -> kuaishouPubf.PicUrl
	15, // 14: kuaishouPubf.SCWebFeedPush.commentFeeds:type_name -> kuaishouPubf.WebCommentFeed
	25, // 15: kuaishouPubf.SCWebFeedPush.comboCommentFeed:type_name -> kuaishouPubf.WebComboCommentFeed
	24, // 16: kuaishouPubf.SCWebFeedPush.likeFeeds:type_name -> kuaishouPubf.WebLikeFeed
	23, // 17: kuaishouPubf.SCWebFeedPush.giftFeeds:type_name -> kuaishouPubf.WebGiftFeed
	22, // 18: kuaishouPubf.SCWebFeedPush.systemNoticeFeeds:type_name -> kuaishouPubf.WebSystemNoticeFeed
	21, // 19: kuaishouPubf.SCWebFeedPush.shareFeeds:type_name -> kuaishouPubf.WebShareFeed
	9,  // 20: kuaishouPubf.WebShareFeed.user:type_name -> kuaishouPubf.SimpleUserInfo
	2,  // 21: kuaishouPubf.WebShareFeed.liveAssistantType:type_name -> kuaishouPubf.WebLiveAssistantType
	9,  // 22: kuaishouPubf.WebSystemNoticeFeed.user:type_name -> kuaishouPubf.SimpleUserInfo
	6,  // 23: kuaishouPubf.WebSystemNoticeFeed.displayType:type_name -> kuaishouPubf.DisplayType
	9,  // 24: kuaishouPubf.WebGiftFeed.user:type_name -> kuaishouPubf.SimpleUserInfo
	5,  // 25: kuaishouPubf.WebGiftFeed.styleType:type_name -> kuaishouPubf.StyleType
	2,  // 26: kuaishouPubf.WebGiftFeed.liveAssistantType:type_name -> kuaishouPubf.WebLiveAssistantType
	9,  // 27: kuaishouPubf.WebLikeFeed.user:type_name -> kuaishouPubf.SimpleUserInfo
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_platform_kuaishou_protostub_kuaishou_proto_init() }
func file_platform_kuaishou_protostub_kuaishou_proto_init() {
	if File_platform_kuaishou_protostub_kuaishou_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSWebEnterRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCWebEnterRoomAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebWatchingUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCWebLiveWatchingUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSWebHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCHeartbeatAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebCommentFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveAudienceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFansGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GzoneNameplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PicUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SCWebFeedPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebShareFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSystemNoticeFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebGiftFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebLikeFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebComboCommentFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSWebEnterRoom_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_platform_kuaishou_protostub_kuaishou_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSWebHeartbeat_Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_platform_kuaishou_protostub_kuaishou_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_platform_kuaishou_protostub_kuaishou_proto_goTypes,
		DependencyIndexes: file_platform_kuaishou_protostub_kuaishou_proto_depIdxs,
		EnumInfos:         file_platform_kuaishou_protostub_kuaishou_proto_enumTypes,
		MessageInfos:      file_platform_kuaishou_protostub_kuaishou_proto_msgTypes,
	}.Build()
	File_platform_kuaishou_protostub_kuaishou_proto = out.File
	file_platform_kuaishou_protostub_kuaishou_proto_rawDesc = nil
	file_platform_kuaishou_protostub_kuaishou_proto_goTypes = nil
	file_platform_kuaishou_protostub_kuaishou_proto_depIdxs = nil
}
